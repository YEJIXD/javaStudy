package org.thread;

public class ThreadEx extends Thread{       // Thread 클래스 상속
    /*
    * Thread
      ☁ 프로세스와 스레드
         · 운영체제에서 실행 중인 하나의 어플리케이션(프로그램)을 프로세스라고 부르는데, 스레드는 이러한 프로세스의 작업을 수행하는 단위
         · 멀티 프로세스는 운영체제에서 할당받은 메모리를 가지고 독립적으로 실행하기 때문에 하나의 프로세스에서 오류가 발생해도 다른 프로세스에 직접적인 영향이 없다.
         · 이와 반면에 둘 이상의 스레드를 가진 프로세스인 멀티 스레드 프로세스는 하나의 프로세스 내부에서 스레드가 생성되기 떄문에 하나의 스레드가 예외를 발생시킨다면 프로세스 자체가 종료될 수 있다.

      ☁ 메인 스레드
         · 모든 자바 어플리케이션은 main() 메소드를 실행하면서 메인 스레드가 시작된다.
         · 필요에 의해 작업 스레드들을 만들어서 병렬로 코드를 실행할 수 있다.(멀티 스레드를 이용한 멀티 태스킹)
         · 멀티 스레드 어플리케이션 환경에서 실행 중인 스레드가 하나라도 있으면 프로세스가 종료되지 않는다.

      ☁ 싱글 스레딩과 멀티 스레딩
         · 싱글 스레딩 : 메인 스레드만을 가지고 작업을 처리하는 프로세스
         · 멀티 스레딩 : 메인 스레드 외의 추가적인 스레드를 이용해 병렬적으로 작업을 처리하는 프로세스

         · 하나의 자원을 사용하는 작업이 여러 개일 경우, 싱글 스레드 프로세스가 멀티 스레드 프로세스보다 효율적일 수 있다.
         · 하지만 별도의 자원을 각각 사용할 경우 멀티 스레딩 어플리케이션이 더 효율적이다.

      ☁ 멀티 스레딩의 장,단점
         · CPU 이용률 향상
         · 효율적인 자원 활용
         · 수행 기능별로 분리하여 코드가 간결해짐
         · 어플리케이션의 응답성 향상

         · 같은 프로세스의 자원을 공유하므로 동기화가 필요
         · 동기화 처리에 관한 이슈 처리 필요(교착상태, 기아상태 등)
         · CPU 환경이나 OS의 스케줄러를 고려해야 함

      ☁ 작업 스레드
         · 멀티 스레딩 어플리케이션을 개발하려면 병렬로 실행할 작업이 몇 개인지 결정하고 작업별로 스레드를 생성해야 한다.
         · 메인 스레드는 무조건 존재하므로, 메인 작업 외의 병렬 작업 수만큼 작업 스레드를 생성한다.
         · 작업 스레드는 객체로 생성되므로, Thread 클래스를 이용하거나 Thread 클래스를 상속하여 하위 클래스로 생성하여 사용할 수 있다.

      ☁ Thread 클래스를 이용한 직접 생성
         · Runnable 타입 파라미터를 갖는 java.lang.Thread 클래스의 생성자를 호출해야 한다.
         · Runnable 은 인터페이스이기 때문에 구현 객체를 만들어 대입해야 한다.
         · Runnable 에는 작업 스레드가 실행할 코드를 작성할 수 있는 run() 메소드가 정의되어 있어야 한다.

         · Thread 객체 생성
           Thread thread = new Thread(Runnable r);

         · Runnable 인터페이스를 구현한 작업 객체 만들기
           class ThreadEx implements Runnable {
               public void run(){
                   // 작업 코드
               }
           }

         · Runnable 인터페이스를 익명 구현하여 Thread 객체 생성
           Thread thread = new Thread(new Runnable() {
               public void run(){
                    // Code
               }
           });
            
         · 작업 스레드 실행
           thread.start();
    * */

    /*
      ☁ Thread 하위 클래스로 생성
        · 작업 스레드가 실행할 Runnable 을 따로 구현하지 않고 Thread 클래스를 상속받아 작업 스레드를 정의하면서 내용을 포함시킨다.
        · Thread 클래스를 상속한 후, run() 메소드를 재정의하여 실행 코드를 작성
    * */
    @Override
    public void run(){
        // 작업 코드
    }
}
